class DirectoryHandler{fs;rootDir="fs:";currentDirectory=this.rootDir;currentDirectoryHandle;constructor(FSDirectoryHandle){if(FSDirectoryHandle instanceof FileSystemDirectoryHandle){this.fs=FileSystemDirectoryHandle}}assignFS(FSDirectoryHandle){this.fs=FSDirectoryHandle;this.rootDir=FSDirectoryHandle.name+":";this.currentDirectory=this.rootDir;this.currentDirectoryHandle=FSDirectoryHandle}mkdir(directory){return this.getDir(directory,true)}cd(directory){if(!directory){return this.currentDirectoryHandle}return new Promise(((resolve,reject)=>{directory=this.fixDir(directory);this.getDir(directory).then((dir=>{this.currentDirectoryHandle=dir;this.currentDirectory=directory;resolve(this.currentDirectoryHandle)})).catch(reject)}))}sort(filesDirectory,sortFunction){sortFunction??=(a,b)=>a.size-b.size;if(typeof filesDirectory==="string"||!filesDirectory){filesDirectory=[filesDirectory??"*"]}return new Promise((async(resolve,reject)=>{var f=[],error;for(var i=0;i<filesDirectory.length;i++){var k=await this.getFile(filesDirectory[i]).catch((e=>error=e));if(error){reject(error);return}if(k instanceof FileSystemFileHandle){f.push(await k.getFile().catch((e=>error=e)));if(error){reject(error);return}}else{for(var l=0;l<k.length;l++){f.push(await k[l].getFile().catch((e=>error=e)));if(error){reject(error);return}}}}resolve(f.sort(sortFunction))}))}dir(directory){return new Promise((async(resolve,reject)=>{directory=directory?this.fixDir(directory).split("/"):[".",""];var wildcard=directory.pop(),WC=wildcard.includes("*"),error;if(wildcard===this.rootDir){wildcard=""}directory=await this.getDir(directory.join("/")+(WC?"":"/"+wildcard)).catch((e=>error=e));if(error){reject(error);return}var iterator=directory.values(),arr=[];for(var v;(v=await iterator.next())?.value!==undefined;){if(WC){if(DirectoryHandler.wildCard(v.value.name,wildcard)){arr.push(v.value)}}else{arr.push(v.value)}}resolve(arr)}))}fixDir(directory){directory=directory.replaceAll("\\","/");var d=directory.split("/");var fixedDir;if(directory===this.rootDir){fixedDir=directory+"/"}else if(d[0]===this.rootDir){fixedDir=directory}else if(directory[0]==="/"){fixedDir=this.rootDir+directory}else if(d[0]===".."){let t=this.currentDirectory.split("/");t.pop();t=t.join("/");fixedDir=t+(d[0]===".."?directory.substring(2)||"/":directory)}else if(d[0]==="."||directory[0]!=="/"){fixedDir=this.currentDirectory+(d[0]==="."?directory.substring(1):"/"+directory)}fixedDir=fixedDir.split("/");for(var i=1;i<fixedDir.length;i++){switch(fixedDir[i]){case"..":fixedDir.splice(i-1,2);break;case".":case"":fixedDir.splice(i,1);break}}return fixedDir.join("/")}getDir(directory,create){return new Promise((async(resolve,reject)=>{directory=this.fixDir(directory);if(directory===this.rootDir+"/"){resolve(this.fs);return}var dir=directory.split("/"),pos=this.fs;for(var i=1;i<dir.length;i++){try{pos=await pos.getDirectoryHandle(dir[i],{create:create})}catch(e){reject(e);break}}resolve(pos)}))}getFile(directory,create){return new Promise((async(resolve,reject)=>{directory=this.fixDir(directory).split("/");var fileName=directory.pop();directory=directory.join("/");var dir=await this.getDir(directory,create);try{if(fileName.includes("*")){let d=await this.dir(directory),files=[];for(var i=0;i<d.length;i++){if(d[i].kind==="file"&&DirectoryHandler.wildCard(d[i].name,fileName)){files.push(d[i])}}resolve(files)}else{resolve(await dir.getFileHandle(fileName,{create:create}))}}catch(e){reject(e)}}))}readFile(directory,from,to){return new Promise((async(resolve,reject)=>{if(directory.includes("*")){reject("readFile() does not support wildcards");return}var file=(await(await this.getFile(directory)).getFile()).slice(from,to),reader=await file.stream().getReader(),text="";for(var r;(r=await reader.read())?.value!==undefined;){let len=r.value.length;for(var i=0;i<len;i++){text+=String.fromCharCode(r.value[i])}}resolve(text)}))}writeFile(directory,content,append){return new Promise((async(resolve,reject)=>{var error;var file=directory instanceof FileSystemFileHandle?directory:await this.getFile(directory,true).catch((e=>error=e));if(error){reject(error);return}try{if(file instanceof FileSystemFileHandle){var writable=await file.createWritable({keepExistingData:append});if(append){await writable.seek((await file.getFile()).size)}await writable.write(content);await writable.close()}else{for(var i=0;i<file.length;i++){var writable=await file[i].createWritable({keepExistingData:append});if(append){await writable.seek((await file[i].getFile()).size)}await writable.write(content);await writable.close()}}}catch(e){reject(e)}resolve()}))}async appendFileStream(directory,bufferSize){return new DirectoryHandler.appendFileStream(await this.getFile(directory,bufferSize))}more(directory){return new Promise((async(resolve,reject)=>{if(directory.includes("*")){reject("more() does not support wildcards");return}this.getFile(directory).then((e=>e.getFile())).then((e=>e.stream())).then((e=>getReader())).then((e=>resolve(e))).catch((e=>reject(e)))}))}copy(directory,destination){return new Promise((async(resolve,reject)=>{var error;var file=await this.getFile(directory).catch((e=>error=e));if(error){reject(error);return}var to=await this.getDir(destination).catch((()=>this.getFile(destination,true).catch((e=>error=e))));if(error){reject(error);return}if(to instanceof FileSystemFileHandle){this.writeFile(to,await(await file.getFile()).arrayBuffer(),false).catch((e=>reject(e)))}else{this.writeFile(this.fixDir(destination)+"/"+file.name,await(await file.getFile()).arrayBuffer()).catch((e=>reject(e)))}resolve()}))}tree(directory="."){return new Promise((async(resolve,reject)=>{directory=this.fixDir(directory);var error;var dir=await this.getDir(directory).catch((e=>error=e));if(error){reject(error);return}var tree={kind:dir.kind,name:dir.name,value:dir,path:directory,files:[]};var scope=this;async function getFiles(dir){var d=await scope.dir(dir.path).catch((e=>error=e));if(error){reject(error);return}for(var i=0;i<d.length;i++){dir.files[i]={kind:d[i].kind,name:d[i].name,value:d[i],path:dir.path+"/"+d[i].name};if(d[i]instanceof FileSystemDirectoryHandle){dir.files[i].files=[];await getFiles(dir.files[i])}}}await getFiles(tree);resolve(tree)}))}toString(){return this.currentDirectory}equals(directoryHandler){return this.fs.fs.isSameEntry(directoryHandler.fs)}static wildCard(string,wildcard){if(string===undefined||wildcard===undefined){throw new TypeError("string and wildcard must be a String")}return new RegExp("^"+wildcard.split("*").map(DirectoryHandler.wildCard.escapeRegex).join(".*")+"$").test(string)}}DirectoryHandler.wildCard.escapeRegex=str=>str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1");DirectoryHandler.appendFileStream=class{buffer="";#initiated=false;constructor(fileHandle,bufferSize=8192){this.fileHandle=fileHandle;this.bufferSize=bufferSize}async#init(){if(this.#initiated){return}this.writableStream=await this.fileHandle.createWritable({keepExistingData:true});this.writableStream.seek((await(await this.fileHandle).getFile()).size);this.#initiated=true}async append(string){this.buffer+=string;if(this.buffer.length>=this.bufferSize){await this.flush()}}async flush(){if(!this.#initiated){await this.#init()}await this.writableStream.write(this.buffer);this.buffer=""}async close(){if(!this.#initiated){await this.#init()}await this.writableStream.close()}};